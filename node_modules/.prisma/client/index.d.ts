import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.1
 * Query Engine version: 439da16b2f8314c6faca7d2dad2cdcf0732e8a9c
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Lists
 * const lists = await prisma.list.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Lists
   * const lists = await prisma.list.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.list`: Exposes CRUD operations for the **List** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.list.findMany()
    * ```
    */
  get list(): ListDelegate;

  /**
   * `prisma.todo`: Exposes CRUD operations for the **Todo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Todos
    * const todos = await prisma.todo.findMany()
    * ```
    */
  get todo(): TodoDelegate;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): ProfileDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ListDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  userId: 'userId'
};

export declare type ListDistinctFieldEnum = (typeof ListDistinctFieldEnum)[keyof typeof ListDistinctFieldEnum]


export declare const TodoDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  text: 'text',
  completed: 'completed',
  schedule: 'schedule',
  authorId: 'authorId',
  listId: 'listId'
};

export declare type TodoDistinctFieldEnum = (typeof TodoDistinctFieldEnum)[keyof typeof TodoDistinctFieldEnum]


export declare const ProfileDistinctFieldEnum: {
  id: 'id',
  bio: 'bio',
  userId: 'userId'
};

export declare type ProfileDistinctFieldEnum = (typeof ProfileDistinctFieldEnum)[keyof typeof ProfileDistinctFieldEnum]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  email: 'email',
  name: 'name'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model List
 */

export type List = {
  id: number
  createdAt: Date
  name: string
  userId: number | null
}


export type AggregateList = {
  count: number
  avg: ListAvgAggregateOutputType | null
  sum: ListSumAggregateOutputType | null
  min: ListMinAggregateOutputType | null
  max: ListMaxAggregateOutputType | null
}

export type ListAvgAggregateOutputType = {
  id: number
  userId: number | null
}

export type ListSumAggregateOutputType = {
  id: number
  userId: number | null
}

export type ListMinAggregateOutputType = {
  id: number
  userId: number | null
}

export type ListMaxAggregateOutputType = {
  id: number
  userId: number | null
}


export type ListAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type ListSumAggregateInputType = {
  id?: true
  userId?: true
}

export type ListMinAggregateInputType = {
  id?: true
  userId?: true
}

export type ListMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregateListArgs = {
  where?: ListWhereInput
  orderBy?: Enumerable<ListOrderByInput> | ListOrderByInput
  cursor?: ListWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ListDistinctFieldEnum>
  count?: true
  avg?: ListAvgAggregateInputType
  sum?: ListSumAggregateInputType
  min?: ListMinAggregateInputType
  max?: ListMaxAggregateInputType
}

export type GetListAggregateType<T extends AggregateListArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetListAggregateScalarType<T[P]>
}

export type GetListAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ListAvgAggregateOutputType ? ListAvgAggregateOutputType[P] : never
}
    
    

export type ListSelect = {
  id?: boolean
  createdAt?: boolean
  name?: boolean
  todos?: boolean | FindManyTodoArgs
  User?: boolean | UserArgs
  userId?: boolean
}

export type ListInclude = {
  todos?: boolean | FindManyTodoArgs
  User?: boolean | UserArgs
}

export type ListGetPayload<
  S extends boolean | null | undefined | ListArgs,
  U = keyof S
> = S extends true
  ? List
  : S extends undefined
  ? never
  : S extends ListArgs | FindManyListArgs
  ? 'include' extends U
    ? List  & {
      [P in TrueKeys<S['include']>]:
      P extends 'todos'
      ? Array<TodoGetPayload<S['include'][P]>> :
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof List ? List[P]
: 
      P extends 'todos'
      ? Array<TodoGetPayload<S['select'][P]>> :
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null : never
    }
  : List
: List


export interface ListDelegate {
  /**
   * Find zero or one List that matches the filter.
   * @param {FindOneListArgs} args - Arguments to find a List
   * @example
   * // Get one List
   * const list = await prisma.list.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneListArgs>(
    args: Subset<T, FindOneListArgs>
  ): CheckSelect<T, Prisma__ListClient<List | null>, Prisma__ListClient<ListGetPayload<T> | null>>
  /**
   * Find the first List that matches the filter.
   * @param {FindFirstListArgs} args - Arguments to find a List
   * @example
   * // Get one List
   * const list = await prisma.list.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstListArgs>(
    args?: Subset<T, FindFirstListArgs>
  ): CheckSelect<T, Prisma__ListClient<List | null>, Prisma__ListClient<ListGetPayload<T> | null>>
  /**
   * Find zero or more Lists that matches the filter.
   * @param {FindManyListArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Lists
   * const lists = await prisma.list.findMany()
   * 
   * // Get first 10 Lists
   * const lists = await prisma.list.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const listWithIdOnly = await prisma.list.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyListArgs>(
    args?: Subset<T, FindManyListArgs>
  ): CheckSelect<T, Promise<Array<List>>, Promise<Array<ListGetPayload<T>>>>
  /**
   * Create a List.
   * @param {ListCreateArgs} args - Arguments to create a List.
   * @example
   * // Create one List
   * const List = await prisma.list.create({
   *   data: {
   *     // ... data to create a List
   *   }
   * })
   * 
  **/
  create<T extends ListCreateArgs>(
    args: Subset<T, ListCreateArgs>
  ): CheckSelect<T, Prisma__ListClient<List>, Prisma__ListClient<ListGetPayload<T>>>
  /**
   * Delete a List.
   * @param {ListDeleteArgs} args - Arguments to delete one List.
   * @example
   * // Delete one List
   * const List = await prisma.list.delete({
   *   where: {
   *     // ... filter to delete one List
   *   }
   * })
   * 
  **/
  delete<T extends ListDeleteArgs>(
    args: Subset<T, ListDeleteArgs>
  ): CheckSelect<T, Prisma__ListClient<List>, Prisma__ListClient<ListGetPayload<T>>>
  /**
   * Update one List.
   * @param {ListUpdateArgs} args - Arguments to update one List.
   * @example
   * // Update one List
   * const list = await prisma.list.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ListUpdateArgs>(
    args: Subset<T, ListUpdateArgs>
  ): CheckSelect<T, Prisma__ListClient<List>, Prisma__ListClient<ListGetPayload<T>>>
  /**
   * Delete zero or more Lists.
   * @param {ListDeleteManyArgs} args - Arguments to filter Lists to delete.
   * @example
   * // Delete a few Lists
   * const { count } = await prisma.list.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ListDeleteManyArgs>(
    args: Subset<T, ListDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Lists.
   * @param {ListUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Lists
   * const list = await prisma.list.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ListUpdateManyArgs>(
    args: Subset<T, ListUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one List.
   * @param {ListUpsertArgs} args - Arguments to update or create a List.
   * @example
   * // Update or create a List
   * const list = await prisma.list.upsert({
   *   create: {
   *     // ... data to create a List
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the List we want to update
   *   }
   * })
  **/
  upsert<T extends ListUpsertArgs>(
    args: Subset<T, ListUpsertArgs>
  ): CheckSelect<T, Prisma__ListClient<List>, Prisma__ListClient<ListGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyListArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateListArgs>(args: Subset<T, AggregateListArgs>): Promise<GetListAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for List.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ListClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  todos<T extends FindManyTodoArgs = {}>(args?: Subset<T, FindManyTodoArgs>): CheckSelect<T, Promise<Array<Todo>>, Promise<Array<TodoGetPayload<T>>>>;

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * List findOne
 */
export type FindOneListArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * Filter, which List to fetch.
  **/
  where: ListWhereUniqueInput
}


/**
 * List findFirst
 */
export type FindFirstListArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * Filter, which List to fetch.
  **/
  where?: ListWhereInput
  orderBy?: Enumerable<ListOrderByInput> | ListOrderByInput
  cursor?: ListWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ListDistinctFieldEnum>
}


/**
 * List findMany
 */
export type FindManyListArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * Filter, which Lists to fetch.
  **/
  where?: ListWhereInput
  /**
   * Determine the order of the Lists to fetch.
  **/
  orderBy?: Enumerable<ListOrderByInput> | ListOrderByInput
  /**
   * Sets the position for listing Lists.
  **/
  cursor?: ListWhereUniqueInput
  /**
   * The number of Lists to fetch. If negative number, it will take Lists before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Lists.
  **/
  skip?: number
  distinct?: Enumerable<ListDistinctFieldEnum>
}


/**
 * List create
 */
export type ListCreateArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * The data needed to create a List.
  **/
  data: ListCreateInput
}


/**
 * List update
 */
export type ListUpdateArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * The data needed to update a List.
  **/
  data: ListUpdateInput
  /**
   * Choose, which List to update.
  **/
  where: ListWhereUniqueInput
}


/**
 * List updateMany
 */
export type ListUpdateManyArgs = {
  data: ListUpdateManyMutationInput
  where?: ListWhereInput
}


/**
 * List upsert
 */
export type ListUpsertArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * The filter to search for the List to update in case it exists.
  **/
  where: ListWhereUniqueInput
  /**
   * In case the List found by the `where` argument doesn't exist, create a new List with this data.
  **/
  create: ListCreateInput
  /**
   * In case the List was found with the provided `where` argument, update it with this data.
  **/
  update: ListUpdateInput
}


/**
 * List delete
 */
export type ListDeleteArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
  /**
   * Filter which List to delete.
  **/
  where: ListWhereUniqueInput
}


/**
 * List deleteMany
 */
export type ListDeleteManyArgs = {
  where?: ListWhereInput
}


/**
 * List without action
 */
export type ListArgs = {
  /**
   * Select specific fields to fetch from the List
  **/
  select?: ListSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ListInclude | null
}



/**
 * Model Todo
 */

export type Todo = {
  id: number
  createdAt: Date
  title: string
  text: string | null
  completed: boolean
  schedule: Date
  authorId: number
  listId: number | null
}


export type AggregateTodo = {
  count: number
  avg: TodoAvgAggregateOutputType | null
  sum: TodoSumAggregateOutputType | null
  min: TodoMinAggregateOutputType | null
  max: TodoMaxAggregateOutputType | null
}

export type TodoAvgAggregateOutputType = {
  id: number
  authorId: number
  listId: number | null
}

export type TodoSumAggregateOutputType = {
  id: number
  authorId: number
  listId: number | null
}

export type TodoMinAggregateOutputType = {
  id: number
  authorId: number
  listId: number | null
}

export type TodoMaxAggregateOutputType = {
  id: number
  authorId: number
  listId: number | null
}


export type TodoAvgAggregateInputType = {
  id?: true
  authorId?: true
  listId?: true
}

export type TodoSumAggregateInputType = {
  id?: true
  authorId?: true
  listId?: true
}

export type TodoMinAggregateInputType = {
  id?: true
  authorId?: true
  listId?: true
}

export type TodoMaxAggregateInputType = {
  id?: true
  authorId?: true
  listId?: true
}

export type AggregateTodoArgs = {
  where?: TodoWhereInput
  orderBy?: Enumerable<TodoOrderByInput> | TodoOrderByInput
  cursor?: TodoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TodoDistinctFieldEnum>
  count?: true
  avg?: TodoAvgAggregateInputType
  sum?: TodoSumAggregateInputType
  min?: TodoMinAggregateInputType
  max?: TodoMaxAggregateInputType
}

export type GetTodoAggregateType<T extends AggregateTodoArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetTodoAggregateScalarType<T[P]>
}

export type GetTodoAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof TodoAvgAggregateOutputType ? TodoAvgAggregateOutputType[P] : never
}
    
    

export type TodoSelect = {
  id?: boolean
  createdAt?: boolean
  title?: boolean
  text?: boolean
  completed?: boolean
  schedule?: boolean
  author?: boolean | UserArgs
  authorId?: boolean
  List?: boolean | ListArgs
  listId?: boolean
}

export type TodoInclude = {
  author?: boolean | UserArgs
  List?: boolean | ListArgs
}

export type TodoGetPayload<
  S extends boolean | null | undefined | TodoArgs,
  U = keyof S
> = S extends true
  ? Todo
  : S extends undefined
  ? never
  : S extends TodoArgs | FindManyTodoArgs
  ? 'include' extends U
    ? Todo  & {
      [P in TrueKeys<S['include']>]:
      P extends 'author'
      ? UserGetPayload<S['include'][P]> :
      P extends 'List'
      ? ListGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Todo ? Todo[P]
: 
      P extends 'author'
      ? UserGetPayload<S['select'][P]> :
      P extends 'List'
      ? ListGetPayload<S['select'][P]> | null : never
    }
  : Todo
: Todo


export interface TodoDelegate {
  /**
   * Find zero or one Todo that matches the filter.
   * @param {FindOneTodoArgs} args - Arguments to find a Todo
   * @example
   * // Get one Todo
   * const todo = await prisma.todo.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneTodoArgs>(
    args: Subset<T, FindOneTodoArgs>
  ): CheckSelect<T, Prisma__TodoClient<Todo | null>, Prisma__TodoClient<TodoGetPayload<T> | null>>
  /**
   * Find the first Todo that matches the filter.
   * @param {FindFirstTodoArgs} args - Arguments to find a Todo
   * @example
   * // Get one Todo
   * const todo = await prisma.todo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstTodoArgs>(
    args?: Subset<T, FindFirstTodoArgs>
  ): CheckSelect<T, Prisma__TodoClient<Todo | null>, Prisma__TodoClient<TodoGetPayload<T> | null>>
  /**
   * Find zero or more Todos that matches the filter.
   * @param {FindManyTodoArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Todos
   * const todos = await prisma.todo.findMany()
   * 
   * // Get first 10 Todos
   * const todos = await prisma.todo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const todoWithIdOnly = await prisma.todo.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyTodoArgs>(
    args?: Subset<T, FindManyTodoArgs>
  ): CheckSelect<T, Promise<Array<Todo>>, Promise<Array<TodoGetPayload<T>>>>
  /**
   * Create a Todo.
   * @param {TodoCreateArgs} args - Arguments to create a Todo.
   * @example
   * // Create one Todo
   * const Todo = await prisma.todo.create({
   *   data: {
   *     // ... data to create a Todo
   *   }
   * })
   * 
  **/
  create<T extends TodoCreateArgs>(
    args: Subset<T, TodoCreateArgs>
  ): CheckSelect<T, Prisma__TodoClient<Todo>, Prisma__TodoClient<TodoGetPayload<T>>>
  /**
   * Delete a Todo.
   * @param {TodoDeleteArgs} args - Arguments to delete one Todo.
   * @example
   * // Delete one Todo
   * const Todo = await prisma.todo.delete({
   *   where: {
   *     // ... filter to delete one Todo
   *   }
   * })
   * 
  **/
  delete<T extends TodoDeleteArgs>(
    args: Subset<T, TodoDeleteArgs>
  ): CheckSelect<T, Prisma__TodoClient<Todo>, Prisma__TodoClient<TodoGetPayload<T>>>
  /**
   * Update one Todo.
   * @param {TodoUpdateArgs} args - Arguments to update one Todo.
   * @example
   * // Update one Todo
   * const todo = await prisma.todo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends TodoUpdateArgs>(
    args: Subset<T, TodoUpdateArgs>
  ): CheckSelect<T, Prisma__TodoClient<Todo>, Prisma__TodoClient<TodoGetPayload<T>>>
  /**
   * Delete zero or more Todos.
   * @param {TodoDeleteManyArgs} args - Arguments to filter Todos to delete.
   * @example
   * // Delete a few Todos
   * const { count } = await prisma.todo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends TodoDeleteManyArgs>(
    args: Subset<T, TodoDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Todos.
   * @param {TodoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Todos
   * const todo = await prisma.todo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends TodoUpdateManyArgs>(
    args: Subset<T, TodoUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Todo.
   * @param {TodoUpsertArgs} args - Arguments to update or create a Todo.
   * @example
   * // Update or create a Todo
   * const todo = await prisma.todo.upsert({
   *   create: {
   *     // ... data to create a Todo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Todo we want to update
   *   }
   * })
  **/
  upsert<T extends TodoUpsertArgs>(
    args: Subset<T, TodoUpsertArgs>
  ): CheckSelect<T, Prisma__TodoClient<Todo>, Prisma__TodoClient<TodoGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyTodoArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTodoArgs>(args: Subset<T, AggregateTodoArgs>): Promise<GetTodoAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Todo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__TodoClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  List<T extends ListArgs = {}>(args?: Subset<T, ListArgs>): CheckSelect<T, Prisma__ListClient<List | null>, Prisma__ListClient<ListGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Todo findOne
 */
export type FindOneTodoArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * Filter, which Todo to fetch.
  **/
  where: TodoWhereUniqueInput
}


/**
 * Todo findFirst
 */
export type FindFirstTodoArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * Filter, which Todo to fetch.
  **/
  where?: TodoWhereInput
  orderBy?: Enumerable<TodoOrderByInput> | TodoOrderByInput
  cursor?: TodoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TodoDistinctFieldEnum>
}


/**
 * Todo findMany
 */
export type FindManyTodoArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * Filter, which Todos to fetch.
  **/
  where?: TodoWhereInput
  /**
   * Determine the order of the Todos to fetch.
  **/
  orderBy?: Enumerable<TodoOrderByInput> | TodoOrderByInput
  /**
   * Sets the position for listing Todos.
  **/
  cursor?: TodoWhereUniqueInput
  /**
   * The number of Todos to fetch. If negative number, it will take Todos before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Todos.
  **/
  skip?: number
  distinct?: Enumerable<TodoDistinctFieldEnum>
}


/**
 * Todo create
 */
export type TodoCreateArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * The data needed to create a Todo.
  **/
  data: TodoCreateInput
}


/**
 * Todo update
 */
export type TodoUpdateArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * The data needed to update a Todo.
  **/
  data: TodoUpdateInput
  /**
   * Choose, which Todo to update.
  **/
  where: TodoWhereUniqueInput
}


/**
 * Todo updateMany
 */
export type TodoUpdateManyArgs = {
  data: TodoUpdateManyMutationInput
  where?: TodoWhereInput
}


/**
 * Todo upsert
 */
export type TodoUpsertArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * The filter to search for the Todo to update in case it exists.
  **/
  where: TodoWhereUniqueInput
  /**
   * In case the Todo found by the `where` argument doesn't exist, create a new Todo with this data.
  **/
  create: TodoCreateInput
  /**
   * In case the Todo was found with the provided `where` argument, update it with this data.
  **/
  update: TodoUpdateInput
}


/**
 * Todo delete
 */
export type TodoDeleteArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
  /**
   * Filter which Todo to delete.
  **/
  where: TodoWhereUniqueInput
}


/**
 * Todo deleteMany
 */
export type TodoDeleteManyArgs = {
  where?: TodoWhereInput
}


/**
 * Todo without action
 */
export type TodoArgs = {
  /**
   * Select specific fields to fetch from the Todo
  **/
  select?: TodoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TodoInclude | null
}



/**
 * Model Profile
 */

export type Profile = {
  id: number
  bio: string | null
  userId: number
}


export type AggregateProfile = {
  count: number
  avg: ProfileAvgAggregateOutputType | null
  sum: ProfileSumAggregateOutputType | null
  min: ProfileMinAggregateOutputType | null
  max: ProfileMaxAggregateOutputType | null
}

export type ProfileAvgAggregateOutputType = {
  id: number
  userId: number
}

export type ProfileSumAggregateOutputType = {
  id: number
  userId: number
}

export type ProfileMinAggregateOutputType = {
  id: number
  userId: number
}

export type ProfileMaxAggregateOutputType = {
  id: number
  userId: number
}


export type ProfileAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileSumAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileMinAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregateProfileArgs = {
  where?: ProfileWhereInput
  orderBy?: Enumerable<ProfileOrderByInput> | ProfileOrderByInput
  cursor?: ProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
  count?: true
  avg?: ProfileAvgAggregateInputType
  sum?: ProfileSumAggregateInputType
  min?: ProfileMinAggregateInputType
  max?: ProfileMaxAggregateInputType
}

export type GetProfileAggregateType<T extends AggregateProfileArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProfileAggregateScalarType<T[P]>
}

export type GetProfileAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProfileAvgAggregateOutputType ? ProfileAvgAggregateOutputType[P] : never
}
    
    

export type ProfileSelect = {
  id?: boolean
  bio?: boolean
  user?: boolean | UserArgs
  userId?: boolean
}

export type ProfileInclude = {
  user?: boolean | UserArgs
}

export type ProfileGetPayload<
  S extends boolean | null | undefined | ProfileArgs,
  U = keyof S
> = S extends true
  ? Profile
  : S extends undefined
  ? never
  : S extends ProfileArgs | FindManyProfileArgs
  ? 'include' extends U
    ? Profile  & {
      [P in TrueKeys<S['include']>]:
      P extends 'user'
      ? UserGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Profile ? Profile[P]
: 
      P extends 'user'
      ? UserGetPayload<S['select'][P]> : never
    }
  : Profile
: Profile


export interface ProfileDelegate {
  /**
   * Find zero or one Profile that matches the filter.
   * @param {FindOneProfileArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProfileArgs>(
    args: Subset<T, FindOneProfileArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
  /**
   * Find the first Profile that matches the filter.
   * @param {FindFirstProfileArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProfileArgs>(
    args?: Subset<T, FindFirstProfileArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
  /**
   * Find zero or more Profiles that matches the filter.
   * @param {FindManyProfileArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Profiles
   * const profiles = await prisma.profile.findMany()
   * 
   * // Get first 10 Profiles
   * const profiles = await prisma.profile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProfileArgs>(
    args?: Subset<T, FindManyProfileArgs>
  ): CheckSelect<T, Promise<Array<Profile>>, Promise<Array<ProfileGetPayload<T>>>>
  /**
   * Create a Profile.
   * @param {ProfileCreateArgs} args - Arguments to create a Profile.
   * @example
   * // Create one Profile
   * const Profile = await prisma.profile.create({
   *   data: {
   *     // ... data to create a Profile
   *   }
   * })
   * 
  **/
  create<T extends ProfileCreateArgs>(
    args: Subset<T, ProfileCreateArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Delete a Profile.
   * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
   * @example
   * // Delete one Profile
   * const Profile = await prisma.profile.delete({
   *   where: {
   *     // ... filter to delete one Profile
   *   }
   * })
   * 
  **/
  delete<T extends ProfileDeleteArgs>(
    args: Subset<T, ProfileDeleteArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Update one Profile.
   * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
   * @example
   * // Update one Profile
   * const profile = await prisma.profile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProfileUpdateArgs>(
    args: Subset<T, ProfileUpdateArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Delete zero or more Profiles.
   * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
   * @example
   * // Delete a few Profiles
   * const { count } = await prisma.profile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProfileDeleteManyArgs>(
    args: Subset<T, ProfileDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Profiles.
   * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Profiles
   * const profile = await prisma.profile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProfileUpdateManyArgs>(
    args: Subset<T, ProfileUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Profile.
   * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
   * @example
   * // Update or create a Profile
   * const profile = await prisma.profile.upsert({
   *   create: {
   *     // ... data to create a Profile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Profile we want to update
   *   }
   * })
  **/
  upsert<T extends ProfileUpsertArgs>(
    args: Subset<T, ProfileUpsertArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProfileArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProfileArgs>(args: Subset<T, AggregateProfileArgs>): Promise<GetProfileAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Profile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProfileClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Profile findOne
 */
export type FindOneProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profile to fetch.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile findFirst
 */
export type FindFirstProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profile to fetch.
  **/
  where?: ProfileWhereInput
  orderBy?: Enumerable<ProfileOrderByInput> | ProfileOrderByInput
  cursor?: ProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
}


/**
 * Profile findMany
 */
export type FindManyProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profiles to fetch.
  **/
  where?: ProfileWhereInput
  /**
   * Determine the order of the Profiles to fetch.
  **/
  orderBy?: Enumerable<ProfileOrderByInput> | ProfileOrderByInput
  /**
   * Sets the position for listing Profiles.
  **/
  cursor?: ProfileWhereUniqueInput
  /**
   * The number of Profiles to fetch. If negative number, it will take Profiles before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Profiles.
  **/
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
}


/**
 * Profile create
 */
export type ProfileCreateArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The data needed to create a Profile.
  **/
  data: ProfileCreateInput
}


/**
 * Profile update
 */
export type ProfileUpdateArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The data needed to update a Profile.
  **/
  data: ProfileUpdateInput
  /**
   * Choose, which Profile to update.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile updateMany
 */
export type ProfileUpdateManyArgs = {
  data: ProfileUpdateManyMutationInput
  where?: ProfileWhereInput
}


/**
 * Profile upsert
 */
export type ProfileUpsertArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The filter to search for the Profile to update in case it exists.
  **/
  where: ProfileWhereUniqueInput
  /**
   * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
  **/
  create: ProfileCreateInput
  /**
   * In case the Profile was found with the provided `where` argument, update it with this data.
  **/
  update: ProfileUpdateInput
}


/**
 * Profile delete
 */
export type ProfileDeleteArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter which Profile to delete.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile deleteMany
 */
export type ProfileDeleteManyArgs = {
  where?: ProfileWhereInput
}


/**
 * Profile without action
 */
export type ProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
}



/**
 * Model User
 */

export type User = {
  id: number
  email: string
  name: string | null
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  email?: boolean
  name?: boolean
  lists?: boolean | FindManyListArgs
  profile?: boolean | ProfileArgs
  Todo?: boolean | FindManyTodoArgs
}

export type UserInclude = {
  lists?: boolean | FindManyListArgs
  profile?: boolean | ProfileArgs
  Todo?: boolean | FindManyTodoArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'lists'
      ? Array<ListGetPayload<S['include'][P]>> :
      P extends 'profile'
      ? ProfileGetPayload<S['include'][P]> | null :
      P extends 'Todo'
      ? Array<TodoGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'lists'
      ? Array<ListGetPayload<S['select'][P]>> :
      P extends 'profile'
      ? ProfileGetPayload<S['select'][P]> | null :
      P extends 'Todo'
      ? Array<TodoGetPayload<S['select'][P]>> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args?: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  lists<T extends FindManyListArgs = {}>(args?: Subset<T, FindManyListArgs>): CheckSelect<T, Promise<Array<List>>, Promise<Array<ListGetPayload<T>>>>;

  profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>;

  Todo<T extends FindManyTodoArgs = {}>(args?: Subset<T, FindManyTodoArgs>): CheckSelect<T, Promise<Array<Todo>>, Promise<Array<TodoGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Deep Input Types
 */


export type ListWhereInput = {
  AND?: ListWhereInput | Enumerable<ListWhereInput>
  OR?: ListWhereInput | Enumerable<ListWhereInput>
  NOT?: ListWhereInput | Enumerable<ListWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  name?: StringFilter | string
  todos?: TodoListRelationFilter
  User?: UserRelationFilter | UserWhereInput | null
  userId?: IntNullableFilter | number | null
}

export type ListOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  name?: SortOrder
  userId?: SortOrder
}

export type ListWhereUniqueInput = {
  id?: number
}

export type TodoWhereInput = {
  AND?: TodoWhereInput | Enumerable<TodoWhereInput>
  OR?: TodoWhereInput | Enumerable<TodoWhereInput>
  NOT?: TodoWhereInput | Enumerable<TodoWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  title?: StringFilter | string
  text?: StringNullableFilter | string | null
  completed?: BoolFilter | boolean
  schedule?: DateTimeFilter | Date | string
  author?: UserRelationFilter | UserWhereInput
  authorId?: IntFilter | number
  List?: ListRelationFilter | ListWhereInput | null
  listId?: IntNullableFilter | number | null
}

export type TodoOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  title?: SortOrder
  text?: SortOrder
  completed?: SortOrder
  schedule?: SortOrder
  authorId?: SortOrder
  listId?: SortOrder
}

export type TodoWhereUniqueInput = {
  id?: number
}

export type ProfileWhereInput = {
  AND?: ProfileWhereInput | Enumerable<ProfileWhereInput>
  OR?: ProfileWhereInput | Enumerable<ProfileWhereInput>
  NOT?: ProfileWhereInput | Enumerable<ProfileWhereInput>
  id?: IntFilter | number
  bio?: StringNullableFilter | string | null
  user?: UserRelationFilter | UserWhereInput
  userId?: IntFilter | number
}

export type ProfileOrderByInput = {
  id?: SortOrder
  bio?: SortOrder
  userId?: SortOrder
}

export type ProfileWhereUniqueInput = {
  id?: number
  userId?: number
}

export type UserWhereInput = {
  AND?: UserWhereInput | Enumerable<UserWhereInput>
  OR?: UserWhereInput | Enumerable<UserWhereInput>
  NOT?: UserWhereInput | Enumerable<UserWhereInput>
  id?: IntFilter | number
  email?: StringFilter | string
  name?: StringNullableFilter | string | null
  lists?: ListListRelationFilter
  profile?: ProfileRelationFilter | ProfileWhereInput | null
  Todo?: TodoListRelationFilter
}

export type UserOrderByInput = {
  id?: SortOrder
  email?: SortOrder
  name?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
  email?: string
}

export type ListCreateInput = {
  createdAt?: Date | string
  name: string
  todos?: TodoCreateManyWithoutListInput
  User?: UserCreateOneWithoutListsInput
}

export type ListUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  todos?: TodoUpdateManyWithoutListInput
  User?: UserUpdateOneWithoutListsInput
}

export type ListUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
}

export type TodoCreateInput = {
  createdAt?: Date | string
  title: string
  text?: string | null
  completed?: boolean
  schedule: Date | string
  author: UserCreateOneWithoutTodoInput
  List?: ListCreateOneWithoutTodosInput
}

export type TodoUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  text?: string | NullableStringFieldUpdateOperationsInput | null
  completed?: boolean | BoolFieldUpdateOperationsInput
  schedule?: Date | string | DateTimeFieldUpdateOperationsInput
  author?: UserUpdateOneRequiredWithoutTodoInput
  List?: ListUpdateOneWithoutTodosInput
}

export type TodoUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  text?: string | NullableStringFieldUpdateOperationsInput | null
  completed?: boolean | BoolFieldUpdateOperationsInput
  schedule?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type ProfileCreateInput = {
  bio?: string | null
  user: UserCreateOneWithoutProfileInput
}

export type ProfileUpdateInput = {
  bio?: string | NullableStringFieldUpdateOperationsInput | null
  user?: UserUpdateOneRequiredWithoutProfileInput
}

export type ProfileUpdateManyMutationInput = {
  bio?: string | NullableStringFieldUpdateOperationsInput | null
}

export type UserCreateInput = {
  email: string
  name?: string | null
  lists?: ListCreateManyWithoutUserInput
  profile?: ProfileCreateOneWithoutUserInput
  Todo?: TodoCreateManyWithoutAuthorInput
}

export type UserUpdateInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  lists?: ListUpdateManyWithoutUserInput
  profile?: ProfileUpdateOneWithoutUserInput
  Todo?: TodoUpdateManyWithoutAuthorInput
}

export type UserUpdateManyMutationInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type TodoListRelationFilter = {
  every?: TodoWhereInput
  some?: TodoWhereInput
  none?: TodoWhereInput
}

export type UserRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringNullableFilter | null
}

export type BoolFilter = {
  equals?: boolean
  not?: boolean | NestedBoolFilter
}

export type ListRelationFilter = {
  is?: ListWhereInput | null
  isNot?: ListWhereInput | null
}

export type ListListRelationFilter = {
  every?: ListWhereInput
  some?: ListWhereInput
  none?: ListWhereInput
}

export type ProfileRelationFilter = {
  is?: ProfileWhereInput | null
  isNot?: ProfileWhereInput | null
}

export type TodoCreateManyWithoutListInput = {
  create?: TodoCreateWithoutListInput | Enumerable<TodoCreateWithoutListInput>
  connect?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
}

export type UserCreateOneWithoutListsInput = {
  create?: UserCreateWithoutListsInput
  connect?: UserWhereUniqueInput
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type TodoUpdateManyWithoutListInput = {
  create?: TodoCreateWithoutListInput | Enumerable<TodoCreateWithoutListInput>
  connect?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  set?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  disconnect?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  delete?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  update?: TodoUpdateWithWhereUniqueWithoutListInput | Enumerable<TodoUpdateWithWhereUniqueWithoutListInput>
  updateMany?: TodoUpdateManyWithWhereNestedInput | Enumerable<TodoUpdateManyWithWhereNestedInput>
  deleteMany?: TodoScalarWhereInput | Enumerable<TodoScalarWhereInput>
  upsert?: TodoUpsertWithWhereUniqueWithoutListInput | Enumerable<TodoUpsertWithWhereUniqueWithoutListInput>
}

export type UserUpdateOneWithoutListsInput = {
  create?: UserCreateWithoutListsInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutListsDataInput
  upsert?: UserUpsertWithoutListsInput
}

export type UserCreateOneWithoutTodoInput = {
  create?: UserCreateWithoutTodoInput
  connect?: UserWhereUniqueInput
}

export type ListCreateOneWithoutTodosInput = {
  create?: ListCreateWithoutTodosInput
  connect?: ListWhereUniqueInput
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type UserUpdateOneRequiredWithoutTodoInput = {
  create?: UserCreateWithoutTodoInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutTodoDataInput
  upsert?: UserUpsertWithoutTodoInput
}

export type ListUpdateOneWithoutTodosInput = {
  create?: ListCreateWithoutTodosInput
  connect?: ListWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: ListUpdateWithoutTodosDataInput
  upsert?: ListUpsertWithoutTodosInput
}

export type UserCreateOneWithoutProfileInput = {
  create?: UserCreateWithoutProfileInput
  connect?: UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutProfileInput = {
  create?: UserCreateWithoutProfileInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutProfileDataInput
  upsert?: UserUpsertWithoutProfileInput
}

export type ListCreateManyWithoutUserInput = {
  create?: ListCreateWithoutUserInput | Enumerable<ListCreateWithoutUserInput>
  connect?: ListWhereUniqueInput | Enumerable<ListWhereUniqueInput>
}

export type ProfileCreateOneWithoutUserInput = {
  create?: ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput
}

export type TodoCreateManyWithoutAuthorInput = {
  create?: TodoCreateWithoutAuthorInput | Enumerable<TodoCreateWithoutAuthorInput>
  connect?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
}

export type ListUpdateManyWithoutUserInput = {
  create?: ListCreateWithoutUserInput | Enumerable<ListCreateWithoutUserInput>
  connect?: ListWhereUniqueInput | Enumerable<ListWhereUniqueInput>
  set?: ListWhereUniqueInput | Enumerable<ListWhereUniqueInput>
  disconnect?: ListWhereUniqueInput | Enumerable<ListWhereUniqueInput>
  delete?: ListWhereUniqueInput | Enumerable<ListWhereUniqueInput>
  update?: ListUpdateWithWhereUniqueWithoutUserInput | Enumerable<ListUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: ListUpdateManyWithWhereNestedInput | Enumerable<ListUpdateManyWithWhereNestedInput>
  deleteMany?: ListScalarWhereInput | Enumerable<ListScalarWhereInput>
  upsert?: ListUpsertWithWhereUniqueWithoutUserInput | Enumerable<ListUpsertWithWhereUniqueWithoutUserInput>
}

export type ProfileUpdateOneWithoutUserInput = {
  create?: ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: ProfileUpdateWithoutUserDataInput
  upsert?: ProfileUpsertWithoutUserInput
}

export type TodoUpdateManyWithoutAuthorInput = {
  create?: TodoCreateWithoutAuthorInput | Enumerable<TodoCreateWithoutAuthorInput>
  connect?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  set?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  disconnect?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  delete?: TodoWhereUniqueInput | Enumerable<TodoWhereUniqueInput>
  update?: TodoUpdateWithWhereUniqueWithoutAuthorInput | Enumerable<TodoUpdateWithWhereUniqueWithoutAuthorInput>
  updateMany?: TodoUpdateManyWithWhereNestedInput | Enumerable<TodoUpdateManyWithWhereNestedInput>
  deleteMany?: TodoScalarWhereInput | Enumerable<TodoScalarWhereInput>
  upsert?: TodoUpsertWithWhereUniqueWithoutAuthorInput | Enumerable<TodoUpsertWithWhereUniqueWithoutAuthorInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedBoolFilter = {
  equals?: boolean
  not?: boolean | NestedBoolFilter
}

export type TodoCreateWithoutListInput = {
  createdAt?: Date | string
  title: string
  text?: string | null
  completed?: boolean
  schedule: Date | string
  author: UserCreateOneWithoutTodoInput
}

export type UserCreateWithoutListsInput = {
  email: string
  name?: string | null
  profile?: ProfileCreateOneWithoutUserInput
  Todo?: TodoCreateManyWithoutAuthorInput
}

export type TodoUpdateWithWhereUniqueWithoutListInput = {
  where: TodoWhereUniqueInput
  data: TodoUpdateWithoutListDataInput
}

export type TodoUpdateManyWithWhereNestedInput = {
  where: TodoScalarWhereInput
  data: TodoUpdateManyDataInput
}

export type TodoScalarWhereInput = {
  AND?: TodoScalarWhereInput | Enumerable<TodoScalarWhereInput>
  OR?: TodoScalarWhereInput | Enumerable<TodoScalarWhereInput>
  NOT?: TodoScalarWhereInput | Enumerable<TodoScalarWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  title?: StringFilter | string
  text?: StringNullableFilter | string | null
  completed?: BoolFilter | boolean
  schedule?: DateTimeFilter | Date | string
  authorId?: IntFilter | number
  listId?: IntNullableFilter | number | null
}

export type TodoUpsertWithWhereUniqueWithoutListInput = {
  where: TodoWhereUniqueInput
  update: TodoUpdateWithoutListDataInput
  create: TodoCreateWithoutListInput
}

export type UserUpdateWithoutListsDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  profile?: ProfileUpdateOneWithoutUserInput
  Todo?: TodoUpdateManyWithoutAuthorInput
}

export type UserUpsertWithoutListsInput = {
  update: UserUpdateWithoutListsDataInput
  create: UserCreateWithoutListsInput
}

export type UserCreateWithoutTodoInput = {
  email: string
  name?: string | null
  lists?: ListCreateManyWithoutUserInput
  profile?: ProfileCreateOneWithoutUserInput
}

export type ListCreateWithoutTodosInput = {
  createdAt?: Date | string
  name: string
  User?: UserCreateOneWithoutListsInput
}

export type UserUpdateWithoutTodoDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  lists?: ListUpdateManyWithoutUserInput
  profile?: ProfileUpdateOneWithoutUserInput
}

export type UserUpsertWithoutTodoInput = {
  update: UserUpdateWithoutTodoDataInput
  create: UserCreateWithoutTodoInput
}

export type ListUpdateWithoutTodosDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  User?: UserUpdateOneWithoutListsInput
}

export type ListUpsertWithoutTodosInput = {
  update: ListUpdateWithoutTodosDataInput
  create: ListCreateWithoutTodosInput
}

export type UserCreateWithoutProfileInput = {
  email: string
  name?: string | null
  lists?: ListCreateManyWithoutUserInput
  Todo?: TodoCreateManyWithoutAuthorInput
}

export type UserUpdateWithoutProfileDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  lists?: ListUpdateManyWithoutUserInput
  Todo?: TodoUpdateManyWithoutAuthorInput
}

export type UserUpsertWithoutProfileInput = {
  update: UserUpdateWithoutProfileDataInput
  create: UserCreateWithoutProfileInput
}

export type ListCreateWithoutUserInput = {
  createdAt?: Date | string
  name: string
  todos?: TodoCreateManyWithoutListInput
}

export type ProfileCreateWithoutUserInput = {
  bio?: string | null
}

export type TodoCreateWithoutAuthorInput = {
  createdAt?: Date | string
  title: string
  text?: string | null
  completed?: boolean
  schedule: Date | string
  List?: ListCreateOneWithoutTodosInput
}

export type ListUpdateWithWhereUniqueWithoutUserInput = {
  where: ListWhereUniqueInput
  data: ListUpdateWithoutUserDataInput
}

export type ListUpdateManyWithWhereNestedInput = {
  where: ListScalarWhereInput
  data: ListUpdateManyDataInput
}

export type ListScalarWhereInput = {
  AND?: ListScalarWhereInput | Enumerable<ListScalarWhereInput>
  OR?: ListScalarWhereInput | Enumerable<ListScalarWhereInput>
  NOT?: ListScalarWhereInput | Enumerable<ListScalarWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  name?: StringFilter | string
  userId?: IntNullableFilter | number | null
}

export type ListUpsertWithWhereUniqueWithoutUserInput = {
  where: ListWhereUniqueInput
  update: ListUpdateWithoutUserDataInput
  create: ListCreateWithoutUserInput
}

export type ProfileUpdateWithoutUserDataInput = {
  bio?: string | NullableStringFieldUpdateOperationsInput | null
}

export type ProfileUpsertWithoutUserInput = {
  update: ProfileUpdateWithoutUserDataInput
  create: ProfileCreateWithoutUserInput
}

export type TodoUpdateWithWhereUniqueWithoutAuthorInput = {
  where: TodoWhereUniqueInput
  data: TodoUpdateWithoutAuthorDataInput
}

export type TodoUpsertWithWhereUniqueWithoutAuthorInput = {
  where: TodoWhereUniqueInput
  update: TodoUpdateWithoutAuthorDataInput
  create: TodoCreateWithoutAuthorInput
}

export type TodoUpdateWithoutListDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  text?: string | NullableStringFieldUpdateOperationsInput | null
  completed?: boolean | BoolFieldUpdateOperationsInput
  schedule?: Date | string | DateTimeFieldUpdateOperationsInput
  author?: UserUpdateOneRequiredWithoutTodoInput
}

export type TodoUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  text?: string | NullableStringFieldUpdateOperationsInput | null
  completed?: boolean | BoolFieldUpdateOperationsInput
  schedule?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type ListUpdateWithoutUserDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  todos?: TodoUpdateManyWithoutListInput
}

export type ListUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
}

export type TodoUpdateWithoutAuthorDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  text?: string | NullableStringFieldUpdateOperationsInput | null
  completed?: boolean | BoolFieldUpdateOperationsInput
  schedule?: Date | string | DateTimeFieldUpdateOperationsInput
  List?: ListUpdateOneWithoutTodosInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
